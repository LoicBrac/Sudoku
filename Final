//initialisation des différentes bibliothèques
#include "pch.h"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <string>
#include <direct.h>
using namespace std;

int GrilleC[9][9]; // Grille complete du sudoku.


int lectureFichier() 
{
	char* repertoire;
	string nomFichier;
	nomFichier = "\\grille.txt";
	repertoire = _getcwd(NULL, 0); // on récupère le répertoire courant de travail
	ifstream fichier(repertoire + nomFichier);
	string ligne; //Une variable pour stocker les lignes lues
	int i;
	int j;
	int noGrille;

	cout << "choisissez un numero de grille entre 1 et 3 : ";
	cin >> noGrille;
	cout << "Grille complete : \n\n";


	if (fichier)
	{
		//L'ouverture s'est bien passée, on peut donc lire

		/* le fichier grille contient 3 grilles utilisables de sudoku
		chaque grille est séparée de celle qui précède ou qui suit d'une ligne blanche
		pour lire la n-ème grille, on laisse passer (n-1)*10 lignes et on lit les 9 lignes qui suivent*/

		for (i = 0; i < (noGrille - 1) * 10; i++) {
			getline(fichier, ligne);
		}
		for (i = 0; i < 9; i++) {
			(getline(fichier, ligne)); //Tant qu'on n'est pas à la fin, on lit
			for (j = 0; j < 17; j += 2) {
				GrilleC[i][j / 2] = ligne[j] - 48; //-48 pour l'ASCII
			}
		}
	}
	else 	
		return -1;

	for (i = 0; i < 9; i++) {
		for (j = 0; j < 9; j++) {
			cout << GrilleC[i][j] << " ";
		}
		cout << "\n\n";
	}
	return 0;
}





/****************
Fonction rand_a_b : génère un nombre aléatoire entre a et b
On suppose a<b
*****************/
int rand_a_b(int a, int b) {
	return rand() % (b - a) + a;
}

//fonction d'affichage de la grille
void Affichertab(int Tableau[9][9]) {

	//balayage de la grille
	for (int i = 0; i < 9; i++) {
		if (i == 3 || i == 6)
			cout << "\n";

		for (int j = 0; j < 9; j++) {
			if (j == 3 || j == 6)
				cout << "  ";
			cout << Tableau[i][j] << " ";
		}
		cout << "\n\n";
	}
}

/***********
fonction qui renvoie vrai si val est deja present dans la zone à laquelle appartiennent la ligne et la colonne
choisies par l'utilisateur et faux sinon;
On détermine les coordonnées du début de la zone qui contient la case de coordonnées (l,c):
On divise l et c par 3 pour obtenir un quotient;
On multiplie le quotient obtenu par 3 pour avoir les coordonnées de début de Zone qui nous intéressent.
***********/
bool TestZone(int Grille[9][9], int l, int c, int val) {
	div_t quotL;
	div_t quotC;
	int DebZl, DebZc;

	quotL = div(l, 3);
	quotC = div(c, 3);
	DebZl = quotL.quot * 3;
	DebZc = quotC.quot * 3;

	bool trouver = false;
	for (int i = DebZl; i < DebZl + 3; i++) {
		for (int j = DebZc; j < DebZc + 3; j++) {
			/*si la valeur donnée par l'utilisateur est déjà dans la zone*/
			if (Grille[i][j] == val) {
				trouver = true;
			}
		}
	}
	return trouver;
}


/*
renvoie 0 si ok
		1 si deja dans ligne,
		2 si deja dans colonne,
		3 si deja dans bloc,
		4 si case deja attribuee.
		5 si chiffre non valide dans la case
*/

int Verif(int Grille[9][9], int l, int c, int v) {
	int i = 0, j = 0;

	if (Grille[l][c] != 0)
		return 4;

	// Test de la ligne
	while (j < 9 && Grille[l][j] != v) {
		j++;
	}
	if (j != 9)
		return 1;

	//Test de la colonne
	while (i < 9 && Grille[i][c] != v) {
		i++;
	}
	if (i != 9)
		return 2;

	if (TestZone(Grille, l, c, v))
		return 3;
	//Verification de valeur juste
	if (GrilleC[l][c] != v) {
		return 5;
	}

	return 0;
}



/* on s'occupe ici de l'initialisation de la grille du joueur*/
void Initgrillejoueur(int Grille[9][9], int n) {
	//la grille est placée en paramètres et n : nombre de cases à vider
	int lg, col;
	int cpt = 0;
	//On procède au vidage de la grille
	while (cpt < n) {
		/* on balaie n fois la grille à la recherche d'une ligne et d'une colonne (comprises entre 0 et 9*/
		lg = rand_a_b(0, 9);
		col = rand_a_b(0, 9);

		/* si la case choisie aléatoirement n'est pas déjà vidée, on la vide*/
		if (Grille[lg][col] != 0) {
			Grille[lg][col] = 0;
			cpt++;
		}
	}

}


//main principal

int main()
{
	/*introduction du numéro de ligne, de colonne
	et de la valeur choisie par l'utilisateur*/
	int lg, col, val;

	int i, j;


	int GrilleJoueur[9][9];
	int cpt = 0;
	int n;

	
	if (lectureFichier() == -1) {
		cout << "ERREUR: Impossible d'ouvrir le fichier en lecture." << endl;
		return -1; //sortie du programme en erreur
	}

	/*on obtient la grille destinée au joueur*/
	for (i = 0; i < 9; i++) {
		for (j = 0; j < 9; j++) {
			GrilleJoueur[i][j] = GrilleC[i][j];
		}
	}
	
	

	//cout << "grille initiale :\n"; Affichertab(GrilleC);
	//cout << "grille de depart du joueur :\n"; Affichertab(GrilleJoueur);
	cout << "Bienvenue sur ce Sudoku !\n";



	cout << "Combien de cases souhaitez-vous trouver ?";
	cin >> n;
	cout << "grille videe\n";
	/* on vide une partie de la grille du joueur*/

	Initgrillejoueur(GrilleJoueur, n);
	Affichertab(GrilleJoueur);


	while (cpt < n) {
		cout << "entrez un numero de ligne: ";
		cin >> lg;
		cout << "entrez un numero de colonne: ";
		cin >> col;
		cout << "entrez le chiffre que vous voulez placer: ";
		cin >> val;

		switch (Verif(GrilleJoueur, lg - 1, col - 1, val)) {
		case 1:
			cout << "Le chiffre " << val << " est deja present dans la ligne " << lg << "\n";
			break;
		case 2:
			cout << "Le chiffre " << val << " est deja present dans la colonne " << col << "\n\n";
			break;
		case 3:
			cout << "Le chiffre " << val << " est deja present dans le bloc\n\n";
			break;
		case 4:
			cout << "La case " << lg << " - " << col << " est deja attribuee\n\n";
			break;
		case 5:
			cout << "Bien que possible, le nombre " << val << " n'est pas valide ici\n\n";
			break;
		case 0:
			cout << "Le chiffre est valide\n\n";
			GrilleJoueur[lg - 1][col - 1] = val;
			Affichertab(GrilleJoueur);
			cpt++;
		}
	}
	cout << "Bravo, vous avez gagné la partie !\n";


}
